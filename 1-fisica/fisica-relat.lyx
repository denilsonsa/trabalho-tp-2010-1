#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language brazilian
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Trabalho 1 - Camada Física
\end_layout

\begin_layout Author
Denilson Figueiredo de Sá
\end_layout

\begin_layout Date
2010-04-27
\end_layout

\begin_layout Section
Introdução
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Fixing incorrect em-ulação hyphenation.
\end_layout

\begin_layout Plain Layout


\backslash
hyphenation{emu-la-ção}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Redes de computadores são estudadas e implementadas em um modelo de camadas,
 de modo que a camada de baixo presta serviços para a camada de cima, e
 cada camada tem responsabilidades distintas.
 Neste primeiro trabalho, o objetivo é emular a camada mais baixa do modelo
 --- a camada física --- e preparar uma base para os próximos trabalhos.
\end_layout

\begin_layout Section
Visão geral
\end_layout

\begin_layout Standard
A camada física é aquela em contato direto com o meio físico e é responsável
 por converter bits em algum tipo de sinal a ser propagado por um meio de
 transmissão, assim como converter o sinal de volta para bits.
 Estes são alguns dos tipos mais comuns de sinais e meios de transmissão:
\end_layout

\begin_layout Itemize
variação de tensão ou corrente elétrica em um ou mais fios condutores;
\end_layout

\begin_layout Itemize
onda eletromagnética propagada pelo ar;
\end_layout

\begin_layout Itemize
feixes de luz dentro de uma fibra óptica.
\end_layout

\begin_layout Standard
A forma como os dados (os bits) são codificados é tarefa exclusiva da camada
 física.
 Isto inclui questões como modulação, sincronia, multiplexação, colisões,
 interferências, ruído e velocidade de transmissão.
\end_layout

\begin_layout Standard
Estudar todas as tarefas e dificuldades da camada física está muito além
 do escopo deste trabalho e da disciplina, e por isso objetivo do trabalho
 é emular a camada física sobre algum canal de comunicação já existente.
 Por motivos de praticidade e flexibilidade, foi decidido que a emulação
 seria feita por cima do protocolo UDP.
\end_layout

\begin_layout Section
Projeto da camada física
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=C}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O projeto de emulação da camada física possui 5 funções básicas:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int P_Activate_Request(int, char*);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inicializa a emulação da camada física.
 Recebe dois parâmetros: a porta UDP e o endereço IP do host de destino.
 Retorna 0 em caso de falha.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void P_Deactivate_Request(void);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finaliza a emulação da camada física.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void P_Data_Request(char);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Envia um caractere.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int P_Data_Indication(void);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Retorna 1 caso exista uma byte disponível para leitura.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

char P_Data_Receive(void);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lê (consome) o byte disponível para leitura.
\end_layout

\begin_layout Section
Implementação (emulação) da camada física
\end_layout

\begin_layout Standard
A implementação está dividida em 4 arquivos:
\end_layout

\begin_layout Description
fisica.c contém toda a API da camada física, encapsulando o uso do UDP.
\end_layout

\begin_layout Description
fisica-teste.c contém a função 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

main()
\end_layout

\end_inset

 e utiliza as funções dos outros 3 arquivos.
\end_layout

\begin_layout Description
fisica-teste-args.c contém código para reconhecer os parâmetros da linha
 de comando.
\end_layout

\begin_layout Description
nbiocore.c abreviação de 
\series bold
\emph on
Non-Blocking I/O Core
\series default
\emph default
, contém todo o código responsável pela leitura não-bloqueante do 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

socket
\end_layout

\end_inset

 e do 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

stdin
\end_layout

\end_inset

, encapsulando o uso do 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

select()
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Apenas o arquivo principal 
\series bold
fisica-teste.c
\series default
 conhece a existência dos outros arquivos (na verdade, conhece apenas a
 API disponibilizada através dos 
\series bold
*.h
\series default
).
 Cada um dos arquivos restantes pode ser considerado um módulo completamente
 encapsulado, alheio à existência e ao funcionamento dos outros.
 Cabe ao 
\series bold
fisica-teste.c
\series default
 possuir o código 
\begin_inset Quotes eld
\end_inset

cola
\begin_inset Quotes erd
\end_inset

 para integrar todos os módulos.
\end_layout

\begin_layout Section
Dificuldades encontradas
\end_layout

\begin_layout Subsection
Extensões da API de emulação da camada física
\end_layout

\begin_layout Standard
Todas as funções originais da API são precedidas por 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

P_
\end_layout

\end_inset

.
 Todas as funções extras, de extensão da API original, são precedidas por
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Pex_
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void Pex_Set_Local_Port(int);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A descrição original da API de emulação da camada física possuía a limitação
 de apenas receber uma porta na função de inicialização.
 Por esse motivo, era impossível escutar numa porta e enviar dados para
 outra porta, e portanto era impossível realizar a comunicação entre múltiplas
 instâncias do programa na mesma máquina.
\end_layout

\begin_layout Standard
Esta função foi escrita para solucionar essa limitação.
 Esta função deve ser chamada antes da 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

P_Activate_Request()
\end_layout

\end_inset

, indicando em qual a porta local o programa deve escutar por pacotes UDP.
\end_layout

\begin_layout Standard
Se esta função não for chamada, ou se for chamada com parâmetro igual zero,
 então o módulo da camada física vai assumir que a porta local e a porta
 remota serão iguais, exatamente como previsto na API original.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int Pex_Get_Socket_Fd(void);
\end_layout

\begin_layout Plain Layout

void Pex_Receive_Callback(int);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Estas duas funções existem para permitir a integração do módulo de emulação
 da camada física com o módulo de entrada e saída não-bloqueante.
 A primeira destas funções retorna o 
\emph on
file descriptor
\emph default
 do socket UDP, necessário para o uso do 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

select()
\end_layout

\end_inset

.
 A segunda função é simplesmente um callback a ser executado quando houver
 dados disponíveis no socket.
\end_layout

\begin_layout Subsection
Non-Blocking I/O Core
\end_layout

\begin_layout Standard
Este módulo foi desenvolvido para permitir o uso não-bloqueante da entrada
 padrão e do socket.
 Basicamente, este módulo encapsula a função 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

select()
\end_layout

\end_inset

 numa API de fácil uso.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void nbio_register(int, nbio_callback_t);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Registra um novo 
\emph on
file descriptor
\emph default
 e associa uma função a ser executada sempre que esse 
\emph on
file descriptor
\emph default
 estiver disponível para leitura.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
void nbio_unregister(int);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Esta função é o contrário da função anterior: faz um 
\emph on
file descriptor
\emph default
 não ser mais monitorado pelo 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
nbiocore
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
void nbio_register_idle(int, nbio_callback_t);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Define um limite de tempo que o 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
nbiocore
\end_layout

\end_inset

 vai esperar até ter uma leitura disponível.
 Caso nesse tempo nenhuma leitura fique disponível, a função aqui registrada
 será chamada.
 Por padrão, ele vai esperar um tempo infinito.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
void nbio_loop();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inicia o loop principal do 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
nbiocore
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
void nbio_stop_loop();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sinaliza a parada do loop principal.
 Esta função deve ser chamada a partir de alguma função de callback.
 Se esta função nunca for chamada, o loop principal nunca vai terminar.
\end_layout

\begin_layout Subsection
Unbuffered standard input
\end_layout

\begin_layout Standard
Como o objetivo deste trabalho é transmitir bytes individualmente, não faz
 muito sentido ter um buffer de 
\begin_inset Quotes eld
\end_inset

linha
\begin_inset Quotes erd
\end_inset

 na entrada padrão.
 Portanto, foram usadas funções da 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
termios.h
\end_layout

\end_inset

 para mudar colocar terminal em modo 
\emph on
non-canonical
\emph default
.
\end_layout

\begin_layout Section
Execução do programa fisica-teste
\end_layout

\begin_layout Subsection
Compilação
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=bash}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A compilação é bastante simples, pois um Makefile está disponível.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

make
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Também é possível limpar os arquivos compilados usando:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
make clean
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parâmetros de execução
\end_layout

\begin_layout Standard
O programa 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
fisica-teste
\end_layout

\end_inset

 aceita os seguintes parâmetros:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
./fisica-teste 
[
\lang brazilian
local
_
\lang brazilian
port
]
\lang brazilian
 
[
\lang brazilian
remote
_
\lang brazilian
host
]
\lang brazilian
:
remote_
\lang brazilian
port
\end_layout

\end_inset


\end_layout

\begin_layout Description
local_port é a porta local na qual o programa vai escutar por pacotes UDP.
 Este parâmetro é opcional, caso omitido, é assumido que a porta local será
 igual à porta remota.
\end_layout

\begin_layout Description
remote_host é o endereço IP do host com o qual o programa tentará se comunicar.
 Caso omitido, é assumido o endereço 
\emph on
loopback
\emph default
 (127.0.0.1).
\end_layout

\begin_layout Description
remote_port é a porta usada para comunicação com o host remoto.
 Também será a porta local, caso esta tenha sido omitida na linha de comando.
\end_layout

\begin_layout Subsection
Exemplo de execução
\end_layout

\begin_layout Standard
Digite cada um dos comandos a seguir em terminais diferentes na mesma máquina.
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
./fisica-teste 1235 :1234
\end_layout

\begin_layout Plain Layout
./fisica-teste 1234 :1235
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A partir de então, cada byte digitado em um programa será enviado através
 de pacotes UDP para o outro programa.
\end_layout

\begin_layout Standard
A combinação 
\emph on
Ctrl+D
\emph default
 envia um caractere que sinaliza o fim da transmissão, e encerra o programa.
\end_layout

\begin_layout Section
Conclusões
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=C}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O trabalho foi implementado usando variáveis globais para armazenar o estado
 dos diversos módulos (em especial, do módulo de emulação da camada física).
 Embora seja uma solução simples, não é 
\emph on
thread-safe
\emph default
 e não permite o uso de múltiplas interfaces físicas simultaneamente.
 Por outro lado, não há outra forma de implementar esse módulo e manter
 a API original.
\end_layout

\begin_layout Standard
Uma possível melhoria futura é alterar a API para inserir conceitos de orientaçã
o a objetos.
 Não é necessário usar uma linguagem OO para isso, basta a inicialização
 retornar uma 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
struct
\end_layout

\end_inset

, e todas as outras funções passarem a operar em cima dessa 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
struct
\end_layout

\end_inset

, de maneira similar à forma como funciona a API de leitura e escrita de
 arquivos (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout
st
dio.h
\end_layout

\end_inset

) e a API de sockets.
\end_layout

\begin_layout Standard
Uma vez que a API seja modificada para suportar múltiplas interfaces da
 camada física, podemos criar um programa que funcionará como 
\emph on
hub
\emph default
 virtual, replicando um pacote recebido para todas as outras 
\begin_inset Quotes eld
\end_inset

portas
\begin_inset Quotes erd
\end_inset

.
 Embora não seja possível simular uma colisão na nossa camada física emulada,
 essa ferramenta irá permitir a simulação e o estudo de topologias de rede
 
\emph on
broadcast
\emph default
, ou de meio físico compartilhado.
\end_layout

\begin_layout Section
Referências Bibliográficas
\end_layout

\begin_layout Standard
Todos as referências a respeito do código estão incluídas dentro do próprio
 código-fonte, na forma de comentários.
 Além disso, as manpages do Linux foram amplamente consultadas.
\end_layout

\end_body
\end_document
